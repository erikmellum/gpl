
enum Kind {
    INT_CONST,
    DOUBLE_CONST,
    STRING_CONST,
    BINARY_OP,
    UNARY_OP,
    VARIABLE
};

#pragma once
class Variable;
#include <string>
#include <cmath>
#include <stdlib.h>
#define PI 3.14159265
#include "variable.h"
#include "gpl_type.h"
if(lhs->getGplType() == INT)
            {
                if(rhs->getGplType() == DOUBLE)
                {
                    ostringstream oss;
                    oss << (lhs->eval_int() < rhs->eval_double());
                    return oss.str();
                }
                else if(rhs->getGplType() == INT)
                {
                    ostringstream oss;
                    oss << (lhs->eval_int() < rhs->eval_int());
                    return oss.str();
                }
            }
            else if(lhs->getGplType() == DOUBLE)
            {
                if(rhs->getGplType() == DOUBLE)
                {
                    ostringstream oss;
                    oss << (lhs->eval_double() < rhs->eval_double());
                    return oss.str();
                }
                else if(rhs->getGplType() == INT)
                {
                    ostringstream oss;
                    oss << (lhs->eval_double() < rhs->eval_int());
                    return oss.str();
                }
            }
using namespace std;
class Expr
{
    public:
        Expr(int value);
        Expr(double value);
        Expr(string value);
        Expr(Operator_type newtype, Expr *newlhs, Expr *newrhs); // for the operators
        Expr(Operator_type newtype, Expr *newlhs);
        Expr(Variable* value);
        int eval_int();
        double eval_double();
        string eval_string();
        Gpl_type getGplType();
        Operator_type getOperatorType();
        Kind getKind();
    private:
        Gpl_type gpl_type;
        Operator_type operator_type;
        Kind kind;
        int int_value;
        double double_value;
        string string_value;
        Variable* variable_value;
        Expr* lhs;
        Expr* rhs;
};
