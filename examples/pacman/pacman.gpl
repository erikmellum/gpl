int window_height=720;
int window_width=600;
double window_red=0;
double window_green=0;
double window_blue=0;
string window_title="Pacman: By Sam Fries";
int pactimer=0;
forward animation pac_anim(pixmap curpac);
forward animation ghost_anim(pixmap curghost);
//To do: refresh lives after a win
//Fix ai problems post kill
//Fix spawn locations
textbox scorebox(x=0, y=680, red=1, blue=1, green=1, text="Press Space to Start");
int start=0;
pixmap pacman(x=287, y=152, filename="rc.bmp");
pixmap ghosts[4];
rectangle walls[46]; //The walls.  Oh, god, the pain.
rectangle node[66]; //AI nodes- also useful for aligning pacman properly with the map
int gdir[4];
circle pellets[4];
circle dots[320];
int pdir=-1;
int oc=1;
int lives=3;
int animation_speed=90;
int bob2=0;
int xdif=0;
int score=0;
int fudge=0;
int ydif=0;
int bob=0;
int switch[4];//anim switch for ghosts- take that, nonfractional velocities!
int bool=0;
int rander=0;
int bool1=0;
int boolg=0;
int dotcount=0;
int superpac=0;
circle life[3];
int animtimer=0;
//Direction ref:

//0=right
//1=left
//2=up
//3=down

initialization 
{

	for (bob=0; bob<3; bob+=1){
		life[bob].x=bob*30+400;
		life[bob].y=680;
		life[bob].radius=10;
		life[bob].red=1;
		life[bob].green=1;
		life[bob].blue=0;
	}
	for (bob=0; bob<4; bob+=1){
		pellets[bob].radius=10;


		pellets[bob].red=1;
		pellets[bob].green=1;
		pellets[bob].blue=.7;
	}
	pellets[0].x=35;
	pellets[0].y=155;
	pellets[1].x=545;
	pellets[1].y=155;
	pellets[2].x=35;
	pellets[2].y=20*30+5;
	pellets[3].x=545;
	pellets[3].y=20*30+5;
	pacman.animation_block=pac_anim;

	for (bob=0; bob<4; bob+=1){
		gdir[bob]=-1;
		ghosts[bob].filename="ghost"+(bob+1)+".bmp";
		ghosts[bob].animation_block=ghost_anim;
		ghosts[bob].x=285;
		ghosts[bob].y=390;
		ghosts[bob].user_int4=bob;
	}
	ghosts[1].x=ghosts[0].x-60;
	ghosts[2].x=ghosts[0].x+60;
	ghosts[0].x=ghosts[1].x;
	ghosts[0].y=ghosts[1].y+120;
	ghosts[3].y=ghosts[0].y;
	ghosts[3].x=ghosts[2].x;

	pacman.user_int3=0;
	for (bob=0; bob<46; bob+=1){
		//walls[bob].visible=1;
		walls[bob].red=0;
		walls[bob].blue=1;
		walls[bob].green=0;
	}
	
	//Overall frame
	//Top and bottom walls
	walls[0].x=0;
	walls[0].y=21*30;
	walls[0].h=30;
	walls[0].w=600;
	walls[1].x=0;
	walls[1].y=0;
	walls[1].h=30;
	walls[1].w=600;
	//Left wall
	walls[2].x=0;
	walls[2].y=23*15;
	walls[2].w=30;
	walls[2].h=21*15;
	walls[3].x=0;
	walls[3].y=0;
	walls[3].w=30;
	walls[3].h=21*15;
	//Right wall
	walls[4].x=570;
	walls[4].y=23*15;
	walls[4].h=21*15;
	walls[4].w=30;
	walls[5].x=570;
	walls[5].y=0;
	walls[5].w=30;
	walls[5].h=21*15;
	
	//Bottom half
	walls[6].x=60;
	walls[6].y=60;
	walls[6].w=13*15;
	walls[6].h=30;
	walls[7].x=6*30;
	walls[7].y=2*30;
	walls[7].h=3*30;
	walls[7].w=30;
	
	walls[8].x=23*15;
	walls[8].y=60;
	walls[8].w=13*15;
	walls[8].h=30;
	walls[9].x=13*30;
	walls[9].y=60;
	walls[9].w=30;
	walls[9].h=90;
	
	walls[10].x=19*15;
	walls[10].y=60;
	walls[10].h=90;
	walls[10].w=30;
	walls[11].x=240;
	walls[11].y=120;
	walls[11].w=120;
	walls[11].h=30;
	
	walls[12].x=0;
	walls[12].y=120;
	walls[12].w=90;
	walls[12].h=30;
	
	walls[13].x=17*30;
	walls[13].y=120;
	walls[13].w=90;
	walls[13].h=30;
	
	walls[14].x=60;
	walls[14].y=180;
	walls[14].w=90;
	walls[14].h=30;
	walls[15].x=120;
	walls[15].y=120;
	walls[15].w=30;
	walls[15].h=90;
	
	walls[16].x=15*30;
	walls[16].y=180;
	walls[16].w=90;
	walls[16].h=30;
	walls[17].x=15*30;
	walls[17].y=120;
	walls[17].w=30;
	walls[17].h=90;
	
	walls[18].x=19*15;
	walls[18].y=180;
	walls[18].h=90;
	walls[18].w=30;
	walls[19].x=240;
	walls[19].y=240;
	walls[19].w=120;
	walls[19].h=30;
	
	walls[20].x=180;
	walls[20].y=180;
	walls[20].w=75;
	walls[20].h=30;
	
	walls[21].x=23*15;
	walls[21].y=180;
	walls[21].w=75;
	walls[21].h=30;
	
	walls[22].x=0;
	walls[22].y=240;
	walls[22].w=150;
	walls[22].h=75;
	
	walls[23].x=15*30;
	walls[23].y=240;
	walls[23].w=150;
	walls[23].h=75;
	
	walls[24].x=180;
	walls[24].y=240;
	walls[24].w=30;
	walls[24].h=75;
	
	walls[25].x=13*30;
	walls[25].y=240;
	walls[25].w=30;
	walls[25].h=75;
	
	//Ghost prison
	walls[26].x=240;
	walls[26].y=300;
	walls[26].w=120;
	walls[26].h=30;
	
	walls[27].x=240;
	walls[27].y=300;
	walls[27].w=30;
	walls[27].h=90;
	
	walls[28].x=240;
	walls[28].y=360;
	walls[28].w=45;
	walls[28].h=30;
	
	walls[29].x=21*15;
	walls[29].y=360;
	walls[29].w=45;
	walls[29].h=30;
	
	walls[29].h=30;
	
	walls[30].x=11*30;
	walls[30].y=300;
	walls[30].w=30;
	walls[30].h=90;
	
	
	//Upper half
	walls[31].x=0;
	walls[31].y=23*15;
	walls[31].w=150;
	walls[31].h=4*30-15;
	
	walls[32].x=15*30;
	walls[32].y=23*15;
	walls[32].w=150;
	walls[32].h=4*30-15;
	
	walls[33].x=180;
	walls[33].y=23*15;
	walls[33].w=30;
	walls[33].h=6*30-15;
	walls[34].x=180;
	walls[34].y=14*30;
	walls[34].w=5*15;
	walls[34].h=30;
	
	walls[35].x=19*15;
	walls[35].y=14*30;
	walls[35].w=30;
	walls[35].h=90;
	walls[36].x=240;
	walls[36].y=16*30;
	walls[36].w=120;
	walls[36].h=30;
	
	walls[37].x=13*30;
	walls[37].y=23*15;
	walls[37].w=30;
	walls[37].h=6*30-15;
	walls[38].x=23*15;
	walls[38].y=14*30;
	walls[38].w=5*15;
	walls[38].h=30;
	
	walls[39].x=60;
	walls[39].y=16*30;
	walls[39].w=90;
	walls[39].h=30;
	
	walls[40].x=15*30;
	walls[40].y=16*30;
	walls[40].w=90;
	walls[40].h=30;
	
	walls[41].x=60;
	walls[41].y=18*30;
	walls[41].w=90;
	walls[41].h=60;
	
	walls[42].x=15*30;
	walls[42].y=18*30;
	walls[42].w=90;
	walls[42].h=60;
	
	walls[43].x=180;
	walls[43].y=18*30;
	walls[43].w=75;
	walls[43].h=60;
	
	walls[44].x=23*15;
	walls[44].y=18*30;
	walls[44].w=75;
	walls[44].h=60;
	
	walls[45].x=19*15;
	walls[45].y=18*30;
	walls[45].w=30;
	walls[45].h=120;
	

	dots[0].x=39;
	dots[0].y=606;
	dots[0].radius=6;
	dots[0].red=1;
	dots[0].blue=1;
	dots[0].green=1;
	dots[0].proximity=3;
	
	for (bob=1; bob<320; bob+=1){
		if (bob%16!=7 && bob%16!=8 && bob%16!=9){
				dots[bob].x=dots[bob-1].x+30;
				dots[bob].y=dots[bob-1].y;
				if (dots[bob].x>window_width-30){
					dots[bob].x=39;
					dots[bob].y=dots[bob].y-30;
				}
				//Special case for bob/16==9: y+=15
					
		}
		else {
				dots[bob].x=dots[bob-1].x+45;
				if (bob%16==8)
						dots[bob].x+=15;
				dots[bob].y=dots[bob-1].y;
		}
		dots[bob].radius=6;
		dots[bob].red=1;
		dots[bob].blue=1;
		dots[bob].green=1;
		dots[bob].proximity=3;
		if ((bob/16==9 || bob/16== 10) && bob%16==0){
				dots[bob].y-=15;
		}
		for (bob2=0; bob2<46; bob2+=1){
			if (dots[bob] touches walls[bob2])
					dots[bob].visible=0;
		}
	}

	for (bob=0; bob<66; bob+=1) {
		node[bob].w=30;
		node[bob].h=30;
		node[bob].red=1;
		node[bob].green=1;
		node[bob].blue=1;
		node[bob].visible=0;
	}
	
	for (bob=0; bob<7; bob+=1){
		node[bob].x=30;
	}
	node[7].x=90;
	node[8].x=90;
	
	for (bob=9; bob<16; bob+=1){
		node[bob].x=150;
	}
	for (bob=16; bob<24; bob+=1) {
		node[bob].x=210;
	}
	for (bob=24; bob<32; bob+=1) {
		node[bob].x=255;
	}
	node[33].x=285;
	
	for(bob=34; bob<42; bob+=1){
		node[bob].x=315;
	}
	for (bob=42; bob<50; bob+=1){
		node[bob].x=360;
	}
	for (bob=50; bob<57; bob+=1) {
		node[bob].x=420;
	}
	node[57].x=480;
	node[58].x=480;
	for(bob=59; bob<66; bob+=1){
		node[bob].x=540;
	}
	
	node[0].y=30;
	node[0].user_int=3;
	node[1].y=90;
	node[1].user_int=2;
	node[2].y=150;
	node[2].user_int=3;
	node[3].y=210;
	node[3].user_int=2;
	node[4].y=15*30;
	node[4].user_int=3;
	node[5].y=17*30;
	node[5].user_int=4;
	node[6].y=600;
	node[6].user_int=2;
	
	node[7].y=90;
	node[7].user_int=7;
	node[8].y=150;
	node[8].user_int=0;
	
	node[9].y=90;
	node[9].user_int=1;
	node[10].y=150;
	node[10].user_int=4;
	node[11].y=210;
	node[11].user_int=8;
	node[12].y=21*15;
	node[12].user_int=4;
	node[13].y=15*30;
	node[13].user_int=6;
	node[14].y=17*30;
	node[14].user_int=8;
	node[15].y=600;
	node[15].user_int=5;
	
	
	node[16].y=90;
	node[16].user_int=3;
	node[17].y=150;
	node[17].user_int=5;
	node[18].y=210;
	node[18].user_int=7;
	node[19].y=270;
	node[19].user_int=4;
	node[20].y=21*15;
	node[20].user_int=6;
	node[21].y=13*30;
	node[21].user_int=2;
	node[22].y=15*30;
	node[22].user_int=3;
	node[23].y=17*30;
	node[23].user_int=5;
	
	node[24].y=30;
	node[24].user_int=7;
	node[25].y=90;
	node[25].user_int=0;
	node[26].y=150;
	node[26].user_int=7;
	node[27].y=210;
	node[27].user_int=0;
	node[28].y=13*30;
	node[28].user_int=7;
	node[29].y=15*30;
	node[29].user_int=0;
	node[30].y=17*30;
	node[30].user_int=7;
	node[31].y=600;
	node[31].user_int=0;
	
	node[33].y=13*30;
	node[33].user_int=9;
	
	node[34].y=30;
	node[34].user_int=7;
	node[35].y=90;
	node[35].user_int=2;
	node[36].y=150;
	node[36].user_int=7;
	node[37].y=210;
	node[37].user_int=2;
	node[38].y=13*30;
	node[38].user_int=7;
	node[39].y=15*30;
	node[39].user_int=2;
	node[40].y=17*30;
	node[40].user_int=7;
	node[41].y=600;
	node[41].user_int=2;
	
	node[42].y=90;
	node[42].user_int=1;
	node[43].y=150;
	node[43].user_int=5;
	node[44].y=210;
	node[44].user_int=7;
	node[45].y=270;
	node[45].user_int=6;
	node[46].y=21*15;
	node[46].user_int=4;
	node[47].y=13*30;
	node[47].user_int=0;
	node[48].y=15*30;
	node[48].user_int=1;
	node[49].y=17*30;
	node[49].user_int=5;
	
	node[50].y=90;
	node[50].user_int=3;
	node[51].y=150;
	node[51].user_int=6;
	node[52].y=210;
	node[53].user_int=8;
	node[53].y=21*15;
	node[53].user_int=6;
	node[54].y=15*30;
	node[54].user_int=4;
	node[55].y=17*30;
	node[55].user_int=8;
	node[56].y=600;
	node[56].user_int=5;
	
	node[57].y=90;
	node[57].user_int=7;
	node[58].y=150;
	node[58].user_int=2;
	
	node[59].y=30;
	node[59].user_int=1;
	node[60].y=90;
	node[60].user_int=0;
	node[61].y=150;
	node[61].user_int=1;
	node[62].y=210;
	node[62].user_int=0;
	node[63].y=15*30;
	node[63].user_int=1;
	node[64].y=17*30;
	node[64].user_int=6;
	node[65].y=600;
	node[65].user_int=0;
}


animation pac_anim(pixmap curpac)
{
	//Swap his sprites and move according to pdir
	bool=0;
	animtimer+=1;
	if (animtimer==10){
		if (oc==0)
			oc=1;
		else
			oc=0;

		if(pdir==0)
			if (oc==0)
				curpac.filename="rc.bmp";
			else
				curpac.filename="ro.bmp";
		if(pdir==1)
			if (oc==0)
				curpac.filename="lc.bmp";
			else
				curpac.filename="lo.bmp";
		if(pdir==2)
			if (oc==0)
				curpac.filename="uc.bmp";
			else
				curpac.filename="uo.bmp";
		if(pdir==3)
			if (oc==0)
				curpac.filename="dc.bmp";
			else
				curpac.filename="do.bmp";
		animtimer=0;
	}
	for (bob=0; bob<46; bob+=1){
		if (walls[bob].visible==1 && curpac touches walls[bob]){
			if (curpac.x<walls[bob].x && pdir==0){
				bool=1;
				curpac.user_int=bob;
			}
			if (curpac.x>walls[bob].x+walls[bob].w-curpac.w && pdir==1)
			{
				bool=1;
				curpac.user_int=bob;
			}
			if (curpac.y<walls[bob].y && pdir==2)
			{
				bool=1;
				curpac.user_int=bob;
			}
			if (curpac.y>walls[bob].y+walls[bob].h-curpac.w && pdir==3)
			{
				bool=1;
				curpac.user_int=bob;
			}
		}
	}
	
	for (bob=0; bob<66; bob+=1){
		if (curpac touches node[bob]){
			curpac.user_int2=bob;
			if (curpac.user_int3==0)
				curpac.user_int3=1;
		}else {
			if (curpac.user_int2==bob && curpac.user_int3==1){
				curpac.user_int3=0;
			}
		}
	}
	
	for (bob=0; bob<320; bob+=1){
		if (curpac touches dots[bob] && dots[bob].visible==1){
			dots[bob].visible=0;
			dotcount+=1;
			score+=1;
			scorebox.text="Score="+score;
			if (dotcount==178){
				for (bob2=0; bob2<320; bob2+=1){
					dots[bob2].visible=true;
					for (fudge=0; fudge<46; fudge+=1){
						if (dots[bob2] touches walls[fudge])
								dots[bob2].visible=false;
					}
				}
				dotcount=0;
				score=0;
				curpac.x=287;
				curpac.y=152;
				for (bob2=0; bob2<4; bob2+=1){
					ghosts[bob2].x=285;
					ghosts[bob2].y=390;
					pellets[bob2].visible=1;
				}
				start=0;
				scorebox.text="You win! Press space to begin!";
			}
		}
	
	}
	
	if (bool==0){
		if (pdir==0){
			curpac.x+=1;
		}
		if (pdir==1) {
			curpac.x-=1;
		}
		if (pdir==2){
			curpac.y+=1;

		}
		if (pdir==3){
			curpac.y-=1;
		}
	}

	if (curpac.user_int3==2){
		if (!(node[curpac.user_int2] touches curpac))
			curpac.user_int3=0;
	}
	
	if (curpac.x+curpac.w<0)
		curpac.x=window_width;
	else 
		if (curpac.x>window_width)
			curpac.x=0-curpac.w;
			
	for (bob=0; bob<4; bob+=1){
		if (curpac touches pellets[bob]&& pellets[bob].visible==1){
			pellets[bob].visible=0;
			superpac=1;
			pactimer=2000;
		}
	}
}


animation ghost_anim(pixmap curghost){
			//Chase pacman;
	if (superpac==1){
		curghost.filename="dead.bmp";
	}
	else
		curghost.filename="ghost"+(curghost.user_int4+1)+".bmp";
	if (start==1){
			if (pactimer>0){
				pactimer-=1;
			}
			if (pactimer==0){
				superpac=0;
			}
			if (superpac==1){
				curghost.red=0;
				curghost.blue=.5;
			}else
			{
				curghost.blue=0;
				curghost.red=1;
			}

			if(curghost touches pacman){
				if(superpac==0){
					pacman.x=287;
					pacman.y=152;
					lives-=1;
					life[lives].visible=false;
					if (lives==0){
						for (bob2=0; bob2<320; bob2+=1){
							dots[bob2].visible=true;
							for (fudge=0; fudge<46; fudge+=1){
								if (dots[bob2] touches walls[fudge])
										dots[bob2].visible=false;
							}
						}
						dotcount=0;
						score=0;
						curpac.x=287;
						curpac.y=152;
						for (bob2=0; bob2<4; bob2+=1){
							pellets[bob2].visible=1;
							if (bob2<3)
								life[bob2].visible=1;
						}
						ghosts[0].x=210;
						ghosts[0].y=390;
						ghosts[1].x=210;
						ghosts[1].y=255;
						ghosts[2].x=360;
						ghosts[2].y=390;
						ghosts[3].x=360;
						ghosts[3].y=255;
						start=0;
						pdir=-1;
						scorebox.text="Game over! Press space to begin again!";
						lives=3;
					}else{
						for (bob=0; bob<4; bob+=1){
							gdir[bob]=0;

							ghosts[bob].x=285;
							ghosts[bob].y=390;
						}
						scorebox.text="Press space to continue";
						start=0;
						pdir=-1;
					}
				}
				else {
					curghost.x=285;
					curghost.y=390;
					score+=10;
					scorebox.text="Score="+score;
				}
			}

			bob2+=1;
			if (bob2>300)
					bob2=0;
			if (bob2%3==0 || bob2%3==1){
				if (!(curghost touches node[curghost.user_int2]))
					curghost.user_int=0;
			
					xdif=pacman.x-curghost.x;
					ydif=pacman.y - curghost.y;
					for (bob=0; bob<66; bob+=1)
					{
						if (curghost touches node[bob] && curghost.user_int==0)
						{
							curghost.user_int=1;
							curghost.user_int2=bob;
							
							curghost.x=node[bob].x;
							curghost.y=node[bob].y;
							//0=SW
							if (node[bob].user_int==0){
								if (gdir[curghost.user_int4]==2 || gdir[curghost.user_int4]==3)
									gdir[curghost.user_int4]=1;
								else
									gdir[curghost.user_int4]=3;
							}
							//1=NW
							if (node[bob].user_int==1){
								if (gdir[curghost.user_int4]==2 || gdir[curghost.user_int4]==3)
									gdir[curghost.user_int4]=1;
								else
									gdir[curghost.user_int4]=2;
							}
							//2=SE
							if (node[bob].user_int==2){
								if (gdir[curghost.user_int4]==2 || gdir[curghost.user_int4]==3)
									gdir[curghost.user_int4]=0;
								else
									gdir[curghost.user_int4]=3;
							}
							//3=NE
							if (node[bob].user_int==3){
								if (gdir[curghost.user_int4]==2 || gdir[curghost.user_int4]==3)
									gdir[curghost.user_int4]=0;
								else
									gdir[curghost.user_int4]=2;
							}

							//4=NES
							if (node[bob].user_int==4){
								rander=random(6);
								if (rander==1){
									rander=random(3);
									if (rander==0)
										gdir[curghost.user_int4]=0;
									if (rander==1){
										gdir[curghost.user_int4]=2;
									}
									if (rander==2){
										gdir[curghost.user_int4]=3;
									}
								}
								else{
									if (xdif>0 && abs(xdif) > abs(ydif))
										gdir[curghost.user_int4]=0;
									else
										if (ydif>0)
											gdir[curghost.user_int4]=2;
										else
											gdir[curghost.user_int4]=3;
									if (superpac==1){
										if (abs(xdif) < abs(ydif))
											gdir[curghost.user_int4]=0;
										else
											if (ydif>0)
												gdir[curghost.user_int4]=3;
											else
												gdir[curghost.user_int4]=2;
									}
								}
							}
							//5=SEW
							if (node[bob].user_int==5){
								rander=random(6);
								if (rander==1){
									rander=random(3);
									if(rander==0)
										gdir[curghost.user_int4]=0;
									if (rander==1)
										gdir[curghost.user_int4]=1;
									if (rander==2)
										gdir[curghost.user_int4]=3;
								}
								else{
									if (ydif<0 && abs(ydif) > abs(xdif))
										gdir[curghost.user_int4]=3;
									else
										if (xdif>0)
											gdir[curghost.user_int4]=0;
										else
											gdir[curghost.user_int4]=1;
									if (superpac==1){
										if (abs(ydif) < abs(xdif))
											gdir[curghost.user_int4]=3;
										else
											if (xdif>0)
												gdir[curghost.user_int4]=1;
											else
												gdir[curghost.user_int4]=0;
									}
								}
							}
							//6=NWS
							if (node[bob].user_int==6){
								rander=random(6);
								if(rander==1){
									rander=random(3);
									if(rander==0)
										gdir[curghost.user_int4]=1;
									if (rander==1)
										gdir[curghost.user_int4]=3;
									if (rander==2)
										gdir[curghost.user_int4]=2;
								}
								else{
									if (xdif<0 && abs(xdif) > abs(ydif))
										gdir[curghost.user_int4]=1;
									else
										if(ydif>0)
											gdir[curghost.user_int4]=2;
										else
											gdir[curghost.user_int4]=3;
											
									if (superpac==1){
										if (abs(xdif) < abs(ydif))
											gdir[curghost.user_int4]=1;
										else
											if(ydif>0)
												gdir[curghost.user_int4]=3;
											else
												gdir[curghost.user_int4]=2;
									}
								}
							}
							//7=NWE
							if (node[bob].user_int==7){
								rander=random(6);
								if (rander==1){
									rander=random(3);
									if(rander==0)
										gdir[curghost.user_int4]=0;
									if(rander==1)
										gdir[curghost.user_int4]=1;
									if(rander==2)
										gdir[curghost.user_int4]=2;
								}
								else{
									if (ydif>0 && abs(ydif) > abs(xdif))
										gdir[curghost.user_int4]=2;
									else
										if (xdif>0)
											gdir[curghost.user_int4]=0;
										else
											gdir[curghost.user_int4]=1;
									if (superpac==1){
										if (abs(ydif) < abs(xdif))
											gdir[curghost.user_int4]=2;
										else
											if (xdif>0)
												gdir[curghost.user_int4]=1;
											else
												gdir[curghost.user_int4]=0;
									}
								}	
							}
							//8=NEWS
							if (node[bob].user_int==8){
								if (abs(xdif) > abs(ydif))
									if (xdif>0)
										gdir[curghost.user_int4]=0;
									else
										gdir[curghost.user_int4]=1;
								else
									if (ydif>0)
										gdir[curghost.user_int4]=2;
									else
										gdir[curghost.user_int4]=3;
								if (superpac==1){
									if (abs(xdif) < abs(ydif))
										if (xdif<0)
											gdir[curghost.user_int4]=0;
										else
											gdir[curghost.user_int4]=1;
									else
										if (ydif<0)
											gdir[curghost.user_int4]=2;
										else
											gdir[curghost.user_int4]=3;
								}
							}
							//9=EW
							if (node[bob].user_int==9){
								if (xdif>0)
									gdir[curghost.user_int4]=0;
								else
									gdir[curghost.user_int4]=1;
							}
						}
					
					}	
					
					bob=curghost.user_int4;


					if (gdir[bob]==0){
						curghost.x+=1;
						//print("right");
					}
					if (gdir[bob]==1){
						curghost.x-=1;
						//print("left");
					}
					if (gdir[bob]==2){
						curghost.y+=1;
						//print("up");
					}
					if (gdir[bob]==3){
						curghost.y-=1;
						//print("down");
					}
			}
	}
}

on space{
	start=1;
	scorebox.text="Score="+score;
}

on leftarrow{
	if (start==1){
			pdir=1;
			if (oc==0)
				pacman.filename="lc.bmp";
			else
				pacman.filename="lo.bmp";
			if (pacman.user_int3==1)
			{
				pacman.x=node[pacman.user_int2].x+2;
				pacman.y=node[pacman.user_int2].y+2;
				pacman.user_int3=2;
			}
	}
}
on rightarrow{
	if (start==1){
			pdir=0;
			if (oc==0)
				pacman.filename="rc.bmp";
			else
				pacman.filename="ro.bmp";

			if (pacman.user_int3==1)
			{
				pacman.x=node[pacman.user_int2].x+2;
				pacman.y=node[pacman.user_int2].y+2;
				pacman.user_int3=2;
			}
	}
}
on uparrow{
	if (start==1){
			pdir=2;
			if (oc==0)
				pacman.filename="uc.bmp";
			else
				pacman.filename="uo.bmp";
			if (pacman.user_int3==1)
			{
				pacman.x=node[pacman.user_int2].x+2;
				pacman.y=node[pacman.user_int2].y+2;
				pacman.user_int3=2;
			}
	}
}
on downarrow{
	if (start==1){
		pdir=3;
		if (oc==0)
			pacman.filename="dc.bmp";
		else
			pacman.filename="do.bmp";
		if (pacman.user_int3==1)
		{
			pacman.x=node[pacman.user_int2].x+2;
			pacman.y=node[pacman.user_int2].y+2;
			pacman.user_int3=2;
		}
	}
}
