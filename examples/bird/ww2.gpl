/////////////////////////////////////////////////////////////////////////////
//     Reserved variables                                                  //
/////////////////////////////////////////////////////////////////////////////
int window_width = 800;
int window_height = 600;

double window_red = .6;
double window_green = .6;
double window_blue = 1.0;

string window_title = "GPL 1942";
int animation_speed = 80;


/////////////////////////////////////////////////////////////////////////////
//     Programmer global variables                                         //
/////////////////////////////////////////////////////////////////////////////
// standard "whore" variables
int i = 0;
int j = 0;
int k = 0;
int x = 0;
int y = 0;
double w = 0;
double z = 0;

int clock = 0;
rectangle system(x = 0, y = 0, h = 0, w = 0);
int prop = 6; // for propellars


/////////////////////////////////////////////////////////
// Background effects that must be low on the z axis
// note there are 3 layers of clouds
/////////////////////////////////////////////////////////
int max_cloud = 10;
circle clouds[max_cloud * 3];
int cloud_size[3];
int cloud_start[3];   
int cloud_x_increment[3];
int cloud_y_increment[3];
int cloud_y_offset1[3];
int cloud_y_offset2[3];
int cloud_y_offset3[3];

/////////////////////////////////////////////////////////
// Fighter
/////////////////////////////////////////////////////////
// construction
int f_wing = 1;
int f_fuse = 0;
int f_eng1 = 3;
int f_eng2 = 4;
int f_tail = 2;
int f_lshft = 5;
int f_rshft = 6;
int f_prp1 = 7;
int f_prp2 = 8;
int fighter_done = 0;
int fighter_rects = 9;
rectangle f_rects[fighter_rects];
triangle f_tri( x = 0, y = 0 );
circle f_cp( x = 0, y = 0, radius = 0 );

// fighter constants
int fighter_x_speed = 0;
int fighter_y_speed = 0;

// fighter bullets
int bullet_delay = 0;
int bullet_speed = 20;
int max_bullets = 20;
rectangle bullets[ max_bullets ];
circle ass_guns[ max_bullets/2 ];


/////////////////////////////////////////////////////////
// Bomber  NOTE: don't mess with the object ordering!!
/////////////////////////////////////////////////////////
int bomber_done = 0;            // zero is false;
int b_start_x;
int b_start_y;
int turret_x_increment;
int turret_y_increment;
int turret_speed = 1;
int max_turrets = 40;

circle turret_circle[2];
int bomber_rects = 6;
rectangle b_t_tip1( x = 0 );
triangle b_tri2( x = 0, y = 0 );
rectangle bomber[bomber_rects];
rectangle b_t_tip2( x = 0 );
triangle b_tri( x = 0, y = 0 );
circle b_cockpit( x = 0 );
circle b_turret( x = 0 );
circle turret_halos[max_turrets];
circle turrets[max_turrets];

int b_prop = 10; // for bomber propellars
rectangle b_props[4];

// used to id parts of a bomber
int b_wing = 0;
int b_fuse = 1;
int b_eng1 = 2;
int b_eng2 = 3;
int b_eng3 = 4;
int b_eng4 = 5;
int b_health[4];

// Changing these changes the bomber over size
// requires hacking the triangular peices!!
int b_width = 120; // leave at 120
int b_height = 15;

// change these to effect the bombers drifting
int b_x_increment; // set randomly to + or - 3
int b_y_increment; // set randomly to + or - 3


/////////////////////////////////////////////////////////
// Enemy fighters
// NOTE:  built using large array to support several
/////////////////////////////////////////////////////////
int ef_count = 1;
int ef_rects = 7;
int ef_tris = 3;

int ef_fuse = 0;
int ef_wing = 1;
int ef_eng = 2;
int ef_t1 = 3;
int ef_t2 = 4;
int ef_t3 = 5;
int ef_prp = 6;

int ef_topw = 0;
int ef_botw = 1;
int ef_tw = 2;

rectangle ef_rec[ef_count * 7];
circle ef_cp[ef_count];
triangle ef_tri[ef_count * 3];

/////////////////////////////////////////////////////////
// Head's up display
/////////////////////////////////////////////////////////
int b_pts = 1000;
int player_score = 0;
int player_health = 100;
int player_lives = 3;
textbox player1(x = 5, y = window_height - 14, text = "1UP", size = 0.1);
textbox p1_lives( x = 45, y = window_height - 14, text = "" + 3, size = 0.1 );
textbox player2(x = window_width - 30, y = window_height - 14, text = "2UP", size = 0.1);
textbox high_score(x = window_width / 2 - 40, y = window_height - 14, text = "HIGH SCORE", size = 0.1);
textbox high_scoreN( x = window_width /2 - 40, y = window_height -28, text = "0", size =.1);
textbox p1_health( x = 5, y = window_height - 28, text = player_health + "%" );
textbox p1_txt_score( x = 5, y = window_height -42, text = "" + 0, size = 0.1 );

/////////////////////////////////////////////////////////
// Forward declarations for animation blocks 
/////////////////////////////////////////////////////////
forward animation system_animation( rectangle cur_system );
forward animation fighter_init_animation( rectangle cur_f_rect );
forward animation f_props_animation( rectangle cur_fp_rec );

forward animation bomber_animation( rectangle cur_rect );
forward animation bomber_lead_animation( rectangle cur_wing );
forward animation bomber_init_animation( rectangle cur_init_rec );

forward animation ef_animation( rectangle cur_ef_rec );
forward animation ef_lead_animation( rectangle cur_ef_rec2 );
forward animation ef_init_animation( rectangle cur_ef_init );

forward animation bullet_animation( circle cur_bullet );
forward animation ass_guns_animation( circle cur_gun );
forward animation turret_animation( circle cur_turret );

forward animation cloud_animation( circle cur_cloud );
forward animation cloud_init_animation( circle cur_cloud1 );

forward animation dummy_rec_animation( rectangle d_rect );
forward animation dummy_circle_animation( circle d_circle );
forward animation dummy_triangle_animation( triangle d_triangle );

/////////////////////////////////////////////////////////////////////////////
//     Initializations                                                     //
/////////////////////////////////////////////////////////////////////////////
initialization
{   // system allows things such as bomber turrets and clock pulse
    system.animation_block = system_animation;

    // setup init one time animation blocks:
    fighter_done = 0;
    f_rects[0].animation_block = fighter_init_animation;

    bomber_done = 0;
    bomber[b_fuse].animation_block = bomber_init_animation;




    // initialize bullets
    for( i = 0; i < max_bullets; i += 1 )
    {   // assign an animation block
        bullets[i].animation_block = bullet_animation;

        // set attributes;
        bullets[i].x = window_width + 50;
        bullets[i].y = window_height + 50;
        bullets[i].w = 3;
        bullets[i].h = 4;
        bullets[i].visible = false;
    }

    // initialize ass guns
    for( i = 0; i < max_bullets / 2; i += 1 )
    {   // assign animation block
        ass_guns[i].animation_block = ass_guns_animation;

        // set attributes 
        ass_guns[i].x = window_width + 50;
        ass_guns[i].y = window_height + 50;
        ass_guns[i].radius = 3;
        ass_guns[i].red = .5;
        ass_guns[i].green = .5;
        ass_guns[i].blue =0;
        ass_guns[i].visible = false;
    }

    // initialize turrets
    for( i = 0; i < max_turrets; i += 1 )
    {   // assign animation block
        turrets[i].animation_block = turret_animation;

        // set attributes 
        turret_halos[i].x = window_width + 50;
        turret_halos[i].y = window_width + 50;
        turret_halos[i].radius = 3;
        turret_halos[i].red = .9;
        turret_halos[i].green = .1;
        turret_halos[i].blue = 0;
        turret_halos[i].visible = false;
        turret_halos[i].user_int = i;

        turrets[i].x = window_width + 50;
        turrets[i].y = window_width + 50;
        turrets[i].radius = 2;
        turrets[i].red = .9;
        turrets[i].green = .7;
        turrets[i].blue = 0;
        turrets[i].visible = false;
        turrets[i].user_int = i;
    }

    ////////////////////////////////////////////////////////////////////////
    // init clouds
    ////////////////////////////////////////////////////////////////////////
    clouds[0].animation_block = cloud_init_animation;
    clouds[10].animation_block = cloud_init_animation;
    clouds[20].animation_block = cloud_init_animation;

    // id the clouds
    for( i = 0;  i < 10; i += 1 ) { clouds[i].user_int = 0; } //level 0 highest
    for( i = 10; i < 20; i += 1 ) { clouds[i].user_int = 1; } //level 1 medium
    for( i = 20; i < 30; i += 1 ) { clouds[i].user_int = 2; } //level 2 lowest
    cloud_y_offset1[0] = -10; cloud_y_offset2[0] = -5; cloud_y_offset3[0] = -2;
    cloud_y_offset1[1] = 0;   cloud_y_offset2[1] = 0;  cloud_y_offset3[1] = 0;
    cloud_y_offset1[2] = 10;  cloud_y_offset2[2] = 5;  cloud_y_offset3[2] = 2;
    cloud_size[0] = 20;
    cloud_size[1] = 10;
    cloud_size[2] = 5;
    cloud_y_increment[0] = 15;
    cloud_y_increment[1] = 10;
    cloud_y_increment[2] = 5;

    cloud_start[0] = random( window_width );
    cloud_start[1] = random( window_width );
    cloud_start[2] = random( window_width );
}

/////////////////////////////////////////////////////////////////////////////
//     Animation Blocks                                                    //
/////////////////////////////////////////////////////////////////////////////
animation dummy_rec_animation( rectangle d_rect ) {}
animation dummy_circle_animation( circle d_circle ) {}
animation dummy_triangle_animation( triangle d_triangle ) {}

animation system_animation( rectangle cur_system )
{   // increment the clock
    if( clock <= 1000 ) clock += 1;
    else clock = 0;

    if( b_tri.visible == false ) // bomber is dead do stuff to respawn it
    {   bomber_done = 0;
        b_tri.visible = true;
        bomber[b_wing].animation_block = bomber_init_animation;

        // add to the player's score
        player_score += b_pts;
        p1_txt_score.text = "" + player_score;
    }
}


animation ef_animation( rectangle cur_ef_rec )
{
}


animation ef_lead_animation( rectangle cur_ef_rec2 )
{
}


animation ef_init_animation( rectangle cur_ef_init )
{   // set rotation and visibility for all the peices
    for( i = 0; i < ef_rects; i += 1 )
    {   ef_rec[i].rotation = 0.0;
        ef_rec[i].visible = true;
    }
    for( i = 0; i < ef_tris; i += 1 )
    {   ef_tri[i].visible = true;
    }
    ef_cp[cur_ef_init.user_int].visible= true;

}


animation fighter_init_animation( rectangle cur_f_rect )
{   // initialize the player fighter BIG JOB!!
    
    // undo any death animations!!
    for( i = 0; i < fighter_rects; i += 1 )
    {   f_rects[i].visible = true;
        f_rects[i].rotation = 0.0;
    }
    // same for the cockpit and wing triangle
    f_tri.visible = true;  f_tri.rotation = 180.0;
    f_cp.visible = true;


    // start with animation blocks
    f_rects[7].animation_block = f_props_animation;
    f_rects[8].animation_block = f_props_animation;
    
    // initialize fighter wing:
    f_rects[1].x = 0;
    f_rects[1].y = 100;
    f_rects[1].h = 5;
    f_rects[1].w = 50;
    f_rects[1].red = 0;
    f_rects[1].green = 0;
    f_rects[1].blue = 0;
    f_rects[1].user_string = "wing_span";
    f_rects[1].user_int = 1;

    // initialize fighter fuselage
    f_rects[0].h = 8;
    f_rects[0].w = 6;
    f_rects[0].x = f_rects[1].x + f_rects[1].w / 2 - f_rects[0].w / 2;
    f_rects[0].y = f_rects[1].y + f_rects[1].h;
    f_rects[0].red = 0; f_rects[0].green = 0; f_rects[0].blue = 0;
    f_rects[0].user_string = "fuse"; f_rects[0].user_int = 0;

    // initialize fighter engines  width = 4
    f_rects[3].x = f_rects[1].x + 10;  
    f_rects[4].x = f_rects[1].x + f_rects[1].w - 14;
    f_rects[3].y = f_rects[1].y + f_rects[1].h;  
    f_rects[4].y = f_rects[1].y + f_rects[1].h;
    f_rects[3].h = 5; f_rects[3].w = 5;
    f_rects[4].h = 5; f_rects[4].w = 5;

    f_rects[3].red = 0;  f_rects[3].green = 0;  f_rects[3].blue = 1.0;
    f_rects[4].red = 0;  f_rects[4].green = 0;  f_rects[4].blue = 1.0;
    f_rects[3].user_string = "eng_1"; f_rects[3].user_int = 3;
    f_rects[4].user_string = "eng_2"; f_rects[4].user_int = 4;


    // init fighter propellars
    f_rects[7].x = f_rects[3].x + f_rects[3].w / 2;
    f_rects[8].x = f_rects[4].x + f_rects[4].w / 2;
    f_rects[7].y = f_rects[3].y + f_rects[3].h;  
    f_rects[8].y = f_rects[4].y + f_rects[4].h;
    f_rects[7].h = 2; f_rects[7].w = 8;
    f_rects[8].h = 2; f_rects[8].w = 8; 

    f_rects[7].red = 0;  f_rects[7].green = 0;  f_rects[7].blue = 0;
    f_rects[8].red = 0;  f_rects[8].green = 0;  f_rects[8].blue = 0;
    f_rects[7].user_string = "prop_1"; f_rects[7].user_int = 7;
    f_rects[8].user_string = "prop_2"; f_rects[8].user_int = 8;

    
    // initialize fighter tail wing
    f_rects[2].x = f_rects[1].x + 5; // should be 1/2 the difference
    f_rects[2].y = f_rects[1].y - 14; 
    f_rects[2].h = 3;
    f_rects[2].w = 40;
    f_rects[2].red = 0;
    f_rects[2].green = 0;
    f_rects[2].blue = 0;
    f_rects[2].user_string = "tail_wing";
    f_rects[2].user_int = 2;


    // initialize fighter tail shafts
    f_rects[5].h = f_rects[1].y - f_rects[2].y + f_rects[2].h; 
    f_rects[5].w = 3;
    f_rects[6].h = f_rects[1].y - f_rects[2].y + f_rects[2].h; 
    f_rects[6].w = 3; 

    f_rects[5].x = f_rects[3].x + (f_rects[3].w - f_rects[5].w); 
    f_rects[6].x = f_rects[4].x;
    f_rects[5].y = f_rects[2].y - f_rects[2].h;
    f_rects[6].y = f_rects[2].y - f_rects[2].h;

    f_rects[5].red = 0;  f_rects[5].green = 0;  f_rects[5].blue = 1.0;
    f_rects[6].red = 0;  f_rects[6].green = 0;  f_rects[6].blue = 1.0;
    f_rects[5].user_string = "tshaft_1"; f_rects[5].user_int = 5;
    f_rects[6].user_string = "tshaft_2"; f_rects[6].user_int = 6;
    

    // fighter aesthetic triangles
    f_tri.x = f_rects[1].x;
    f_tri.y = f_rects[1].y - 6;
    f_tri.size = f_rects[1].w;
    f_tri.rotation = 180.0;
    f_tri.skew = .1;
    f_tri.red = 0; f_tri.green = 0; f_tri.blue = 0;
    f_tri.user_string = "lower_wing"; f_tri.user_int = 0;


    // fighter aesthetic cockpit (circle)
    f_cp.x = f_rects[1].x + f_rects[1].w / 2 - f_rects[0].w / 2;
    f_cp.y = f_rects[1].y;
    f_cp.radius = 3;
    f_cp.red = .90; f_cp.green = .90; f_cp.blue = 1.0;


    // fighter animation is handled by the f_prop animation
    f_rects[0].animation_block = dummy_rec_animation;
    fighter_done = 1;
}


// animatates the props on the fighter and bomber
animation f_props_animation( rectangle cur_fp_rec )
{   if( clock % 2 == 0 )
    {   f_rects[7].w = prop * -1;
        f_rects[8].w = prop * -1;
        for( i = 0; i < 4; i += 1 )
        {   if( b_health[i] > 0 )
                b_props[i].w = b_prop * -1;
        }
    }
    else
    {   f_rects[7].w = prop * 1;
        f_rects[8].w = prop * 1;
        for( i = 0; i < 4; i += 1 )
        {   if( b_health[i] > 0 )
                b_props[i].w = b_prop * 1;
        }
    }

    ////////////////////////////////////////////////////////
    // make the fighter move
    ////////////////////////////////////////////////////////
    // perform checks to get us to stay on the screen
    // left/right checks
    if( f_rects[1].x + fighter_x_speed >= 0 &&
        f_rects[1].x + f_rects[1].w + fighter_x_speed <= window_width )
    {   for( i = 0; i < fighter_rects; i += 1 )
        {   f_rects[i].x += fighter_x_speed;
        }
        f_tri.x += fighter_x_speed;
        f_cp.x += fighter_x_speed;
    }

    // down/up checks
    if( f_rects[5].y + fighter_y_speed >= 0 &&
        f_rects[0].y + f_rects[0].h + fighter_y_speed <= window_height )
    {   for( i = 0; i < fighter_rects; i += 1 )
        {   f_rects[i].y += fighter_y_speed;
        }
        f_cp.y += fighter_y_speed;
        f_tri.y += fighter_y_speed;
    }

    // did the player get killed?
    if( player_health <= 0 )
    {   player_lives -= 1;
        p1_lives.text = player_lives + "";

        if( player_lives == 0 )
        {   high_scoreN.text = player_score + "";
            player_score = 0;
            p1_txt_score.text = 0 + "";
        }
        player_health = 100;
        p1_health.text = player_health + "%";
    }
}


//////////////////////////////////////////////////////////////////
// All the death animations are handled in this block
//////////////////////////////////////////////////////////////////
animation bomber_animation( rectangle cur_rect )
{   // don't move until the bomber has been init'd
//if( bomber_done != 0 ) {

    // modify this to suit when the bomber should be dead
    if( b_health[0] < 0 && b_health[1] < 0 && 
        b_health[2] < 0 && b_health[2] < 0 )
    {   turret_circle[0].visible = false;
        turret_circle[1].visible = false;
        b_cockpit.visible = false;
        b_turret.visible = false;
        b_t_tip1.visible = false;
        b_t_tip2.visible = false;
       

        // fuselage should shrink;
        if( clock % 21 == 0 )  
        {   bomber[b_fuse].w -= 1; bomber[b_fuse].h -= 1;
            if( bomber[b_fuse].w == 0 ) bomber[b_fuse].visible = false;  
        }

        // shrink the wingspan
        if( clock % 35 == 0 ) { bomber[b_wing].h -= 1; bomber[b_wing].w -= 1; }
        bomber[b_wing].rotation += .3;
        if( bomber[b_wing].h == 0 || bomber[b_wing].w == 0 ) bomber[b_wing].visible = false;
          
        
        // make engines break of to either side
        if( cur_rect.user_int == 2 )      { cur_rect.x += -2; cur_rect.y += -1; }
        else if( cur_rect.user_int == 3 ) { cur_rect.x += -1; cur_rect.y += -2; }
        else if( cur_rect.user_int == 4 ) { cur_rect.x += 1; cur_rect.y += -2; }
        else if( cur_rect.user_int == 5 ) { cur_rect.x += 2; cur_rect.y += -1; }

        if( cur_rect.user_int >= 2 && cur_rect.user_int <= 5 ) //engine?
        {   if( clock % 9 == 0 )
            {   cur_rect.w -= 1;
                cur_rect.h -= 1;
            }
            if( cur_rect.h == 0 || cur_rect.w == 0 ) cur_rect.visible = false;
        }

        // send the triangles spinnning
        b_tri.rotation += 3.0;
        b_tri2.rotation += -3.0;
        if( b_tri.size == 0 ) b_tri.visible = false;
        if( b_tri2.size == 0 ) b_tri2.visible = false;

        if( clock % 5 == 0 )
        {   b_tri.x += 1; b_tri.y += -1; 
            b_tri2.x += -1; b_tri2.y += 1; 
            b_tri.size -= 1;
            b_tri2.size -= 1;
        }
    }
//}// end of bomber_done wrapper_if
}


animation bomber_lead_animation( rectangle cur_wing )
{   if( bomber_done != 0 ) {


    if( bomber[b_fuse].y + bomber[b_fuse].h >= window_height ) // fly straight down
    {   b_y_increment = -1;
        if( clock % 2 == 0 ) b_x_increment = -1; else b_x_increment = 1;
    }
    // is the bomber near the bottom of the window?
    else if( bomber[b_fuse].y + b_y_increment <= 0 )
        b_y_increment = b_y_increment * -1;

    // is the bomber near the top of the window?
    else if( bomber[b_fuse].y + bomber[b_fuse].h + b_y_increment >= window_height )
        b_y_increment = b_y_increment * -1;

    // is the bomber near the left edge of the window?
    else if( bomber[b_wing].x <= 1 )
        b_x_increment = b_x_increment * -1;

    // is the bomber near the right edge of the window?
    else if( bomber[b_wing].x >= window_width - bomber[b_wing].w )
        b_x_increment = b_x_increment * -1;

    //////////////////////////////////////////////////////////////////////
    // Movement of the bomber!!
    //////////////////////////////////////////////////////////////////////
    // move the fuselage and the tri pieces
    b_tri.x += b_x_increment;
    b_tri.y += b_y_increment;
    b_tri2.x += b_x_increment;
    b_tri2.y += b_y_increment;
    
    // move props with the bomber
    for( i = 0; i < 4; i += 1 )
    {   // must compensate for the shrinking engine on death :)
        b_props[i].x = bomber[i+2].x + bomber[i+2].w /2 + b_x_increment;
        b_props[i].y = bomber[i+2].y + bomber[i+2].h + b_y_increment;
        if( bomber[i+2].visible == false ) b_props[i].visible = false;
    }

    // move the rectangular pieces of the bomber
    for( i = 0; i < bomber_rects; i += 1 )
    {   bomber[i].x += b_x_increment;
        bomber[i].y += b_y_increment;
    }

    // move the turret_circles
    for( i = 0; i < 2; i += 1 )
    {   turret_circle[i].x += b_x_increment;
        turret_circle[i].y += b_y_increment;
    }

    // move the cockpit and middle turret
    b_cockpit.x += b_x_increment;
    b_cockpit.y += b_y_increment;
    b_turret.x += b_x_increment;
    b_turret.y += b_y_increment;

    // move the fancy tail tips
    b_t_tip1.x += b_x_increment;
    b_t_tip1.y += b_y_increment;
    b_t_tip2.x += b_x_increment;
    b_t_tip2.y += b_y_increment;

    //////////////////////////////////////////////////////////////////////
    // Recover some health
    //////////////////////////////////////////////////////////////////////

    } // end of bomber_done wrapper_if
}


animation bomber_init_animation( rectangle cur_init_rec )
{   // NOTE:  remember to get rid of any lingering death
    //        animation effects
    // init bomber engine health
    for( i = 0; i < 4; i += 1 )
    {   b_health[i] = 100;    }

    for( i = 0; i < bomber_rects; i += 1 ) 
    {   bomber[i].rotation = 0;
        bomber[i].visible = true;
    }

    // get a speed randomly
    b_x_increment = random( 7 ) - 3;
    b_y_increment = random( 7 ) - 3;

    b_start_x = random( window_width - b_width );
    b_start_y = random( 200 ) + window_height;

    // init colors for the rectanglur pieces
    for( i = 2; i < bomber_rects; i += 1 )
    {   bomber[i].red = 0;
        bomber[i].green = .3;
        bomber[i].blue = 0;
    }

    // init colors for the fuselage and wing
    for( i = 0; i < 2; i += 1 )
    {   bomber[i].red = 0;
        bomber[i].green = .40;
        bomber[i].blue = 0;
    }
    bomber[1].green = .45;
    // specific inits

    // add fancy red tail_tips
    b_t_tip1.red = .9;
    b_t_tip1.green = 0;
    b_t_tip1.blue = 0;
    b_t_tip1.visible = true;

    b_t_tip2.red = .9;
    b_t_tip2.green = 0;
    b_t_tip2.blue = 0;
    b_t_tip2.visible = true;

    // initialize bomber wing   same color as triangles
    bomber[ b_wing ].h = 6;
    bomber[ b_wing ].w = b_width;
    bomber[ b_wing ].x = b_start_x; 
    bomber[ b_wing ].y = b_start_y;
    bomber[ b_wing ].user_int = 0;

    // these appear under the other pieces
    b_tri.x = bomber[ b_wing ].x;
    b_tri.y = bomber[ b_wing ].y - 20;
    b_tri.size = bomber[b_wing].w;
    b_tri.rotation = 180.0;
    b_tri.skew = .15;
    b_tri.red = 0; b_tri.green = .5; b_tri.blue = 0;
    b_tri.visible = true;

    b_tri2.y = bomber[ b_wing ].y - 45;
    b_tri2.size = bomber[b_wing].w / 3;
    b_tri2.skew = .3;
    b_tri2.rotation = 0.0;
    b_tri2.red = 0; b_tri2.green = .5; b_tri2.blue = 0;
    b_tri2.visible = true;

    // initialize the bomber fuselage
    bomber[ b_fuse ].h = 70;
    bomber[ b_fuse ].w = 10;
    bomber[ b_fuse ].x = bomber[b_wing].x + b_width/2 - (bomber[b_fuse].w/2);
    bomber[ b_fuse ].y = bomber[b_wing].y - 50;
    bomber[ b_fuse ].user_int = 1;
    b_tri2.x = bomber[b_fuse].x + bomber[b_fuse].w / 2 - b_tri2.size / 2;

    // initialize the turret_circles
    for( i = 0; i < 2; i += 1 )
    {   turret_circle[i].red = 0; 
        turret_circle[i].green = 0;
        turret_circle[i].blue = 0;
        turret_circle[i].radius = 5;
        turret_circle[i].x = bomber[b_fuse].x;
        turret_circle[i].visible = true;
    }
    turret_circle[0].y = bomber[b_fuse].y + bomber[b_fuse].h - 7;
    turret_circle[1].y = bomber[b_fuse].y - 4;
    

    // initialize the other circles
    b_cockpit.radius = 5;
    b_cockpit.red = .9; b_cockpit.green = .9; b_cockpit.blue = .9;
    b_cockpit.x = bomber[b_fuse].x;
    b_cockpit.y = bomber[b_fuse].y + bomber[b_fuse].h -15;
    b_cockpit.visible = true;

    b_turret.radius = 5;
    b_turret.red = 0; b_turret.green = 0; b_turret.blue = 0;
    b_turret.x = bomber[b_fuse].x;
    b_turret.y = bomber[b_fuse].y + bomber[b_fuse].h / 2 - 5;
    b_turret.visible = true;

    // initialize the engines
    bomber[ b_eng1 ].h = 10;
    bomber[ b_eng1 ].w = 8;
    bomber[ b_eng1 ].x = bomber[b_wing].x + bomber[b_wing].w / 4 - bomber[b_fuse].w - bomber[ b_eng1 ].w; 
    bomber[ b_eng1 ].y = bomber[b_wing].y;
    bomber[ b_eng1 ].user_int = 2;
    
    bomber[ b_eng2 ].h = 12;
    bomber[ b_eng2 ].w = 8;
    bomber[ b_eng2 ].x = bomber[b_eng1].x + bomber[b_wing].w / 4 - bomber[b_eng2].w;
    bomber[ b_eng2 ].y = bomber[b_wing].y;
    bomber[ b_eng2 ].user_int = 3;

    bomber[ b_eng4 ].h = 10;
    bomber[ b_eng4 ].w = 8;
    bomber[ b_eng4 ].x = bomber[b_wing].x + bomber[b_wing].w - bomber[b_wing].w / 4 + bomber[b_fuse].w;
    bomber[ b_eng4 ].y = bomber[b_wing].y;
    bomber[ b_eng4 ].user_int = 5;

    bomber[ b_eng3 ].h = 12;
    bomber[ b_eng3 ].w = 8;
    bomber[ b_eng3 ].x = bomber[b_eng4].x - bomber[b_wing].w / 4 + bomber[b_eng3].w;
    bomber[ b_eng3 ].y = bomber[b_wing].y;
    bomber[ b_eng3 ].user_int = 4;



    // init bomber propellars
    for( i = 0; i < 4; i += 1 )
    {   b_props[i].visible = true;
        b_props[i].h = 2; b_props[i].w = 10;
        b_props[i].red = 0; b_props[i].green = 0; b_props[i].blue = 0;
    }
    b_props[0].y = bomber[b_eng1].y + bomber[b_eng1].h;
    b_props[1].y = bomber[b_eng2].y + bomber[b_eng2].h;
    b_props[2].y = bomber[b_eng3].y + bomber[b_eng3].h;
    b_props[3].y = bomber[b_eng4].y + bomber[b_eng4].h;
    b_props[0].x = bomber[b_eng1].x + bomber[b_eng1].w / 2;
    b_props[1].x = bomber[b_eng2].x + bomber[b_eng2].w / 2;
    b_props[2].x = bomber[b_eng3].x + bomber[b_eng3].w / 2;
    b_props[3].x = bomber[b_eng4].x + bomber[b_eng4].w / 2;


    // these assume other peices are already placed
    b_t_tip1.w = ( bomber[b_fuse].x - b_tri2.x +  bomber[b_fuse].w / 2 ) * 2 - 2;
    b_t_tip1.h = b_tri2.y - bomber[b_fuse].y;
    b_t_tip1.x = b_tri2.x + 1;
    b_t_tip1.y = bomber[b_fuse].y;

    b_t_tip2.w = 4;
    b_t_tip2.h = 20;
    b_t_tip2.x = bomber[b_fuse].x + bomber[b_fuse].w / 2 - b_t_tip2.w / 2;
    b_t_tip2.y = bomber[b_fuse].y;

    // allow animations to begin
    bomber_done = 1;

    // initialize animation blocks for the bomber
    for( i = 1; i < bomber_rects; i += 1 )
    {   bomber[i].animation_block = bomber_animation;
    }
    bomber[b_wing].animation_block = bomber_lead_animation;

    bomber_done = 1;
}


animation bullet_animation( circle cur_bullet )
{   if( cur_bullet.user_int <= bullet_delay )
 {  if( bullet_delay < max_bullets ) bullet_delay += 1;

    if( cur_bullet.y < window_height )
    {   cur_bullet.y += bullet_speed;
        if( cur_bullet.y > f_rects[1].y + f_rects[1].h )
            cur_bullet.visible = true;

        //////////////////////////////////////////////////////////////////
        // did we hit the bomber?
        //////////////////////////////////////////////////////////////////
        for( i = 2; i < bomber_rects; i += 1 )
        {   if( cur_bullet touches bomber[i] && bomber[i].visible == true )
            {   cur_bullet.visible = false;
                cur_bullet.x = 1000;
                cur_bullet.y = 1000;

                // deal damage to that engine
                b_health[i - 2] -= 3;
                bomber[i].red += .03;
                bomber[i].green -= .02;
            }
        }

        // set to no damage
        // these do less damage than direc hits to the engines
        if( cur_bullet touches b_tri2 ||
            cur_bullet touches bomber[b_fuse] ||
            cur_bullet touches bomber[b_wing] )
        {   cur_bullet.visible = false;
            cur_bullet.x = 1000;
            cur_bullet.y = 1000;
            //for( i = 0; i < 4; i += 1 ) { b_health[i] -= 3; }
        }
    }
    else
    {   // it's off the screen
        // user_int lets us know if we need to recycle it.
        if( cur_bullet.user_int > 0 )
        {   cur_bullet.user_int = -1;
            cur_bullet.visible = false;
        }
    }
  }//delay
}


animation ass_guns_animation( circle cur_gun)
{   
    if( cur_gun.y > -5 )
    {   cur_gun.y -= 10;
        if( cur_gun.y < f_rects[1].y )
            cur_gun.visible = true;

        //////////////////////////////////////////////////////////////////
        // did we hit the bomber?
        //////////////////////////////////////////////////////////////////
        for( i = 2; i < bomber_rects; i += 1 )
        {   if( cur_gun touches bomber[i] && bomber[i].visible == true )
            {   cur_gun.visible = false;
                cur_gun.x = 1000;
                cur_gun.y = 1000;

                // deal damage to that engine
                b_health[i - 2] -= 3;
                bomber[i].red += .03;
                bomber[i].green -= .02;
            }
        }

        // set to no damage
        // these do less damage than direc hits to the engines
        if( cur_gun touches b_tri2 ||
            cur_gun touches bomber[b_fuse] ||
            cur_gun touches bomber[b_wing] )
        {   cur_gun.visible = false;
            cur_gun.x = 1000;
            cur_gun.y = 1000;
            //for( i = 0; i < 4; i += 1 ) { b_health[i] -= 3; }
        }
    }
    else
    {   // it's off the screen
        // user_int lets us know if we need to recycle it.
        if( cur_gun.user_int > -5 )
        {   cur_gun.user_int = -1;
            cur_gun.visible = false;
        }
    }
}


animation turret_animation( circle cur_turret )
{   // NOTE:  turrets user_int = dx
    //        turret_halo user_int = dy
    k = cur_turret.user_int;  // use this to match turret halo
    x = floor( cur_turret.user_double );
    y = turret_halos[k].user_int;

    // disappear, and run away if the bomber died
    if( ( b_health[0] < 0 && b_health[1] < 0 &&
        b_health[2] < 0 && b_health[2] < 0 ) ||
        bomber[b_wing].visible == false || 
        bomber[b_fuse].visible == false )
    {   cur_turret.visible = false;
        turret_halos[k].visible = false;
        cur_turret.y = 1000;
        turret_halos[k].y = 1000;
    }

    //did we hit the player?
    else if( cur_turret touches f_rects[1] && cur_turret.visible == true )
    {   cur_turret.visible = false;
        turret_halos[k].visible = false;
        cur_turret.x = 1000;
        cur_turret.y = 1000;
        turret_halos[k].x = 1000;
        turret_halos[k].y = 1000;

        // damage the player
        player_health -= 9;
        p1_health.text = player_health + "%";
     }

    // are we still on the screen AND the bomber is alive?
    else if( cur_turret.y < window_height + 10 && cur_turret.y > -10 &&
             cur_turret.x < window_width + 10 && cur_turret.x > -10 &&
        cur_turret.visible == true )
    {   cur_turret.x += x;
        cur_turret.y += y;

        turret_halos[k].x += x;
        turret_halos[k].y += y;
    }

    // this turret is off the screen so fire again!!
    // try to force some delay in shooting
    else if( clock > k * 20 )
    {   cur_turret.visible = true;
        turret_halos[k].visible = true;

        // vector in on the player
        x = bomber[0].x - f_rects[0].x;
        y = bomber[0].y - f_rects[0].y;

        w = sqrt( x * x + y * y );
        z = w / turret_speed;

        cur_turret.user_double = floor( x / z ) * -1;
        turret_halos[k].user_int = floor( y / z ) * -1;


        if( y > 0 ) // player is below the bomber
        {
            if( random( 2 ) % 2 == 0 )
            {   cur_turret.x = bomber[1].x + bomber[1].w / 2;
                cur_turret.y = bomber[1].y;
                turret_halos[k].x = cur_turret.x - 1;
                turret_halos[k].y = cur_turret.y - 1;
            }
            else 
            {   cur_turret.x = bomber[1].x + bomber[1].w / 2;
                cur_turret.y = bomber[1].y + bomber[1].h / 2;
                turret_halos[k].x = cur_turret.x - 1;
                turret_halos[k].y = cur_turret.y - 1;
            }
        }
        else // player is above the player
        {
            if( random( 2 ) % 2 == 0 )
            {   cur_turret.x = bomber[1].x + bomber[1].w / 2;
                cur_turret.y = bomber[1].y + bomber[1].h;
                turret_halos[k].x = cur_turret.x - 1;
                turret_halos[k].y = cur_turret.y - 1;
            }
            else 
            {   cur_turret.x = bomber[1].x + bomber[1].w / 2;
                cur_turret.y = bomber[1].y + bomber[1].h / 2;
                turret_halos[k].x = cur_turret.x - 1;
                turret_halos[k].y = cur_turret.y - 1;
            }
        }
    }
}

animation cloud_animation( circle cur_cloud )
{   // either move the clouds around on the screen 
    k = cur_cloud.user_int;

    if( cur_cloud.y > -100 )
    {   
        cur_cloud.x += cloud_x_increment[k];
        cur_cloud.y -= cloud_y_increment[k];
    }
    else // or randomly place the clouds somewhere
    {   cloud_start[k] = random( window_width - 50 );
        cur_cloud.animation_block = cloud_init_animation;
    }
}

animation cloud_init_animation( circle cur_cloud1 )
{   // calculate the cloud positions
    // j = random offset

    k = cur_cloud1.user_int;  // store user_int in a variable
    x = -1;

    clouds[ k * 10 ].x = cloud_start[ cur_cloud1.user_int ];
    clouds[ k * 10 ].y = window_height + 100;
    for( i = 1; i < max_cloud; i += 1 )
    {   
        if( k == 0 )      j = cloud_y_offset1[ random(3) ];
        else if( k == 1 ) j = cloud_y_offset2[ random(3) ];
        else if( k == 2 ) j = cloud_y_offset3[ random(3) ];

        clouds[ k * 10  + i ].x = clouds[ k * 10 + i + x ].x + cloud_size[k] / 2;
        clouds[ k * 10  + i ].y = clouds[ k * 10 ].y + j; 
    }


    for( i = 0; i < max_cloud; i += 1 )
    {   clouds[ k * 10 + i].red = 1.0; 
        clouds[ k * 10 + i].green = 1.0; 
        clouds[ k * 10 + i].blue = 1.0; 
        clouds[ k * 10 + i].radius = cloud_size[k];
    }
    
    // make sure the clouds all are on normal animation
    for( i = 0; i < max_cloud; i += 1 )
    {   clouds[ k * 10 + i ].animation_block = cloud_animation;
    }
}




/////////////////////////////////////////////////////////////////////////////
//     Event handlers                                                      //
/////////////////////////////////////////////////////////////////////////////
on rightarrow
{ 
    fighter_x_speed = 6;
    fighter_y_speed = 0;
}

on leftarrow
{ 
    fighter_x_speed = -6;
    fighter_y_speed = 0;
}

on uparrow
{   
    fighter_y_speed = 4;
    fighter_x_speed = 0;
}


on downarrow
{ 
    fighter_y_speed = -3;
    fighter_x_speed = 0;
}


on space
{   // fire bullets
    
    if( bullets[max_bullets - 1].visible == false )
    {   // This resets the delay, space between bullets
        bullet_delay = 0;
        
        j = 0;
        for( i = 0; i < max_bullets; i += 2 )
        {   // guns fire two at a time
        
            // every so often a tracer!
            if( i % 3 == 0 )
            {   bullets[i].red = 1.0; 
                bullets[i].green = 0; 
                bullets[i].blue = 0; 
            }
            else
            {   bullets[i].red = .1; 
                bullets[i].green = .1; 
                bullets[i].blue = .1; 
            }

            bullets[i].x = f_rects[0].x -4;
            bullets[i].y = f_rects[1].y + 10 - j;    
            bullets[i].user_int = i;

            // every so often a tracer!
            if( ( i + 1 ) % 3 == 0 )
            {   bullets[i+1].red = 1.0; 
                bullets[i+1].green = 0; 
                bullets[i+1].blue = 0; 
            }
            else
            {   bullets[i+1].red = .1; 
                bullets[i+1].green = .1; 
                bullets[i+1].blue = .1; 
            }
            bullets[i + 1].x = f_rects[0].x + f_rects[0].w + 1;
            bullets[i + 1].y = f_rects[1].y + 10 -j;    
            bullets[i + 1].user_int = i + 1;

            j += 5;
        }
    }
}


on akey
{   // fire ass_guns
    
    if( ass_guns[max_bullets/2 - 1].visible == false )
    {
        j = 0;
        for( i = 0; i < max_bullets/2; i += 1 )
        {   
            ass_guns[i].x = f_rects[0].x + f_rects[0].w / 2 -3;
            ass_guns[i].y = f_rects[1].y + j;    
            ass_guns[i].user_int = i;

            j += 5;
        }
    }
}
